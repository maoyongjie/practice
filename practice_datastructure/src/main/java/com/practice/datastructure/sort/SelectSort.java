package com.practice.datastructure.sort;

import java.util.Arrays;

/**
 * @author MaoYongjie
 * @date 2022/9/15 18:54
 * @Description:
 */
public class SelectSort implements Sort {

    public static void main(String[] args) {
//        int[] arr = {3, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,6,3, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,63, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56,23,56,6,65,45,45,4,8,4,64,8,4,8,5,151,654,849,81,1,1,1,1,1,88941,5165,1,1,6,8,9,6,6,6,6,6,6,6,6,66,6};
        int[] arr = {3, 44, 48, 5, 9, 6, 2, 1, 85, 63, 99,56};
        long l = System.currentTimeMillis();
    //   (new SelectSort()).doSort(arr);
        SelectSort.insertionSort(arr);
        System.out.println(System.currentTimeMillis()-l);

        System.out.println(Arrays.toString(arr));
    }

    @Override
    public void doSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int current  = arr[i];
            int preIndex = i-1;
            while (preIndex >= 0 &&current<arr[preIndex]){
                arr[preIndex+1] =  arr[preIndex];
                preIndex--;
            }
            arr[preIndex + 1] = current;
        }
    }


    public static int[] insertionSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int preIndex = i - 1;
            int current = arr[i];
            while (preIndex >= 0 && current < arr[preIndex]) {
                arr[preIndex + 1] = arr[preIndex];
                preIndex -= 1;
            }
            arr[preIndex + 1] = current;
        }
        return arr;
    }
}
